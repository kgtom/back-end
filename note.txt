
1.衡量代码标准：可读性、可维护性、可扩展性？
解决：设计模式，但有时候为了追求性能，必须写简单粗暴、反模式的代码

2.为什么使用微服务？实践中遇到问题？
a.康威定律：组织结构决定系统设计，一个人做不了的时候，就需要拆分了，为了高效，不扯皮，做到边界明确清晰。
b.服务架构演变：单体---分布式---分布式+缓存--->分布式+高可用
c.实践中遇到问题：分布式数据不一致问题，使用事后补偿、全程日志或者查询模式，遵循cap理论。

3.常用设计模式？

4.架构师具备的能力？
编码、调优、部署、项目管理、架构

5.高可用设计实践？
抵御上游、防御下游、规范自身

6.常用算法？
快排：使用分治思想，关键找基准数

7.常用系统调优手段？
 cup、内存、网络、硬盘、pprof、trace、gc
 
8.做过的支付系统中，遇到过最深刻的问题？如何解决？
订单中心与财务中心 月结对账的问题。
使用nsq或者定时服务后台对账。追求最终的一致性。

9.说一下 consul 使用？
3台阿里云服务器，部署3个agent，
