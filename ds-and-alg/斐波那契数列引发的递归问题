### 概况
 本篇使用两种方式解决斐波那契数列算法问题，一种递归； 另一种使用channel通过消息进行通信。


### 递归及递归改进版
~~~

package main

import "fmt"



//斐波那契数列：1、1、2、3、5、8、13
func main() {
    ret:=fibo(50)
	fmt.Println("ret:",ret)

}

// 方法一：递归法 time O(n) space O(n),当n>50的时候，计算很慢，原因存在计算机重复计算，空间占用越来越多，容易出现栈溢出。
func fibo(i int ) int  {

	if i<=2{
		return 1
	}
	return fibo(i-1)+fibo(i-2)


}

//方法二：改进后递归法，内存只占用3个单位。 time O(n) space O(1)
var tempVal []int =[]int{0,1,1}
func fibo2(i int )int{

	for j:=2;j<=i;j++{
		tempVal[2]=tempVal[0]+tempVal[1]
		tempVal[0],tempVal[1]=tempVal[1],tempVal[2]
	}
	return tempVal[2]

}


~~~
**总结：**
* 递归的优点：实现简单、可读性好；
* 缺点：递归调用，占用空间大，递归太深，存在重复计算，容易造成栈溢出。

### 使用channel开启goroutine

* 使用无缓冲channel,等待结果型，写入后，必须接收后才能继续。
* 使用quit告知主goroutine 退出程序。

~~~go
package main

import "fmt"

func main() {

	chNum := make(chan int)
	quit := make(chan struct{})

	go func() {

		for i := 0; i < 50; i++ {
			//channel是并发安全的，同一时间，有且仅有一个G获取到数据。
			num := <-chNum
			fmt.Println("num:", num)
		}

		quit <- struct{}{}

	}()

	fibo(chNum, quit)

}

func fibo (chNum chan int, quit chan struct{}) {
	x, y := 1, 1
	for {
		select {
		//通过channel来传递内存数据
		case chNum <- x:
			x, y = y, x+y
		case <-quit:
			fmt.Println("end")
			return
		}
	}
}

~~~
**总结：**
 * go的并发属于CSP模型。
 * 不通过共享内存(变量、队列)实现通信，而是通过通信channel来实现共享内存(通过channel传递内存数据在不同goroutine之间安全传递)。
